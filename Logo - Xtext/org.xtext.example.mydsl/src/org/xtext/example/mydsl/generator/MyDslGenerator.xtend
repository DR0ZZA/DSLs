/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.CMD
import org.xtext.example.mydsl.myDsl.PAPER
import org.xtext.example.mydsl.myDsl.TURTLE
import org.xtext.example.mydsl.myDsl.RIGHT
import org.xtext.example.mydsl.myDsl.LEFT
import org.xtext.example.mydsl.myDsl.MOVE
import org.xtext.example.mydsl.myDsl.PENCOLOUR
import org.xtext.example.mydsl.myDsl.PENSTATE

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
		var double paperInitWidth
		var double paperInitHeight
		var double TurtleOrientation = 0
		var boolean brushState = true
		var double turtleX
		var double turtleY
		var double newX
		var double newY
		var boolean changeMade
		var String colour = 'black'
		var String paperColour = 'white'
		
		override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('turtle.html', ''' 
		<!DOCTYPE html>
		<html>
		<body>
		«setPaper(resource.allContents.filter(CMD).filter(PAPER).head)»
		<svg height="«paperInitHeight»" width="«paperInitWidth»">
			<rect width="«paperInitWidth»" height="«paperInitHeight»" style="fill:«paperColour»"/>
		«FOR c : resource.allContents.filter(CMD).toIterable»
		
		«switch c {
			TURTLE case c: setTurtle(c)
			
			PENCOLOUR case c: setColour(c)
			
			PENSTATE case c: changePenState(c)
		
			RIGHT case c: rotateTurtleRight(c.amount)
				
			LEFT case c: rotateTurtleLeft(c.amount)
				
			MOVE case c: move(c.amount)			
		}»
		
		«IF 	changeMade && brushState»
			<line x1="«turtleX»" y1="«turtleY»" x2="«newX»" y2="«newY»" style="stroke:«colour»;stroke-width:2" />
			«resetco()»
		«ELSE»
			«resetco()»
		«ENDIF»
		
		«ENDFOR»						            
		Sorry, your browser does not support inline SVG.
		</svg>
		</body>
		</html>
        ''')
	}
	
	def void setColour(PENCOLOUR c) {
		colour = c.colour.toLowerCase
	}
	
	def void setPaper(PAPER c) {
			changeMade = false
			paperInitWidth = c.sizeX
			paperInitHeight = c.sizeY
			paperColour = c.paperColour.toLowerCase
	}
	
	def void setTurtle(TURTLE c) {
			changeMade = false
			turtleX = c.startPosX
			turtleY = c.startPosY
			newX = turtleX
			newY = turtleY
			}
			
	def void rotateTurtleRight (int angle) {
		changeMade = false
		TurtleOrientation = (TurtleOrientation += angle) % 360
	}
	
	def void rotateTurtleLeft (int angle) {
		changeMade = false
		TurtleOrientation = ((360 + TurtleOrientation) - angle) % 360	
	}
	
	def void resetco() {
		turtleX = newX
		turtleY = newY
		changeMade = false
	}
	
	def void changePenState(PENSTATE s) {
		changeMade = false
		if (s.penState.equals('UP'))
			brushState = false
		else
			brushState = true
	}
	
	def void move(int amount) {
		newX = Math.round(turtleX + (amount * Math.sin(TurtleOrientation*(Math.PI/180))))
		newY = Math.round(turtleY - (amount * Math.cos(TurtleOrientation*(Math.PI/180))))
		changeMade = true
	}
	
}
