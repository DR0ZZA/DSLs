/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.LEFT;
import org.xtext.example.mydsl.myDsl.MOVE;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PAPER;
import org.xtext.example.mydsl.myDsl.PENCOLOUR;
import org.xtext.example.mydsl.myDsl.PENSTATE;
import org.xtext.example.mydsl.myDsl.PROGRAM;
import org.xtext.example.mydsl.myDsl.RIGHT;
import org.xtext.example.mydsl.myDsl.TURTLE;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.LEFT:
				sequence_LEFT(context, (LEFT) semanticObject); 
				return; 
			case MyDslPackage.MOVE:
				sequence_MOVE(context, (MOVE) semanticObject); 
				return; 
			case MyDslPackage.PAPER:
				sequence_PAPER(context, (PAPER) semanticObject); 
				return; 
			case MyDslPackage.PENCOLOUR:
				sequence_PENCOLOUR(context, (PENCOLOUR) semanticObject); 
				return; 
			case MyDslPackage.PENSTATE:
				sequence_PENSTATE(context, (PENSTATE) semanticObject); 
				return; 
			case MyDslPackage.PROGRAM:
				sequence_PROGRAM(context, (PROGRAM) semanticObject); 
				return; 
			case MyDslPackage.RIGHT:
				sequence_RIGHT(context, (RIGHT) semanticObject); 
				return; 
			case MyDslPackage.TURTLE:
				sequence_TURTLE(context, (TURTLE) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CMD returns LEFT
	 *     LEFT returns LEFT
	 *
	 * Constraint:
	 *     amount=INT
	 */
	protected void sequence_LEFT(ISerializationContext context, LEFT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LEFT__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LEFT__AMOUNT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLEFTAccess().getAmountINTTerminalRuleCall_1_0(), semanticObject.getAmount());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CMD returns MOVE
	 *     MOVE returns MOVE
	 *
	 * Constraint:
	 *     amount=INT
	 */
	protected void sequence_MOVE(ISerializationContext context, MOVE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MOVE__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MOVE__AMOUNT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMOVEAccess().getAmountINTTerminalRuleCall_1_0(), semanticObject.getAmount());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CMD returns PAPER
	 *     PAPER returns PAPER
	 *
	 * Constraint:
	 *     (sizeX=INT sizeY=INT paperColour=STRING)
	 */
	protected void sequence_PAPER(ISerializationContext context, PAPER semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PAPER__SIZE_X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PAPER__SIZE_X));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PAPER__SIZE_Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PAPER__SIZE_Y));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PAPER__PAPER_COLOUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PAPER__PAPER_COLOUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAPERAccess().getSizeXINTTerminalRuleCall_1_0(), semanticObject.getSizeX());
		feeder.accept(grammarAccess.getPAPERAccess().getSizeYINTTerminalRuleCall_2_0(), semanticObject.getSizeY());
		feeder.accept(grammarAccess.getPAPERAccess().getPaperColourSTRINGTerminalRuleCall_3_0(), semanticObject.getPaperColour());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CMD returns PENCOLOUR
	 *     PENCOLOUR returns PENCOLOUR
	 *
	 * Constraint:
	 *     colour=STRING
	 */
	protected void sequence_PENCOLOUR(ISerializationContext context, PENCOLOUR semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PENCOLOUR__COLOUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PENCOLOUR__COLOUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPENCOLOURAccess().getColourSTRINGTerminalRuleCall_1_0(), semanticObject.getColour());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CMD returns PENSTATE
	 *     PENSTATE returns PENSTATE
	 *
	 * Constraint:
	 *     (penState='UP' | penState='DOWN')
	 */
	protected void sequence_PENSTATE(ISerializationContext context, PENSTATE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PROGRAM returns PROGRAM
	 *
	 * Constraint:
	 *     commands+=CMD+
	 */
	protected void sequence_PROGRAM(ISerializationContext context, PROGRAM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CMD returns RIGHT
	 *     RIGHT returns RIGHT
	 *
	 * Constraint:
	 *     amount=INT
	 */
	protected void sequence_RIGHT(ISerializationContext context, RIGHT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RIGHT__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RIGHT__AMOUNT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRIGHTAccess().getAmountINTTerminalRuleCall_1_0(), semanticObject.getAmount());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CMD returns TURTLE
	 *     TURTLE returns TURTLE
	 *
	 * Constraint:
	 *     (startPosX=INT startPosY=INT)
	 */
	protected void sequence_TURTLE(ISerializationContext context, TURTLE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TURTLE__START_POS_X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TURTLE__START_POS_X));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TURTLE__START_POS_Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TURTLE__START_POS_Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTURTLEAccess().getStartPosXINTTerminalRuleCall_1_0(), semanticObject.getStartPosX());
		feeder.accept(grammarAccess.getTURTLEAccess().getStartPosYINTTerminalRuleCall_2_0(), semanticObject.getStartPosY());
		feeder.finish();
	}
	
	
}
