/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PROGRAMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PROGRAM");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCMDParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//PROGRAM:
		//	commands+=CMD*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=CMD*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }
		
		//CMD
		public RuleCall getCommandsCMDParserRuleCall_0() { return cCommandsCMDParserRuleCall_0; }
	}
	public class CMDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CMD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAPERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTURTLEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPENSTATEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPENCOLOURParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMOVEParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRIGHTParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLEFTParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//CMD:
		//	PAPER | TURTLE | PENSTATE | PENCOLOUR | MOVE | RIGHT | LEFT;
		@Override public ParserRule getRule() { return rule; }
		
		//PAPER | TURTLE | PENSTATE | PENCOLOUR | MOVE | RIGHT | LEFT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PAPER
		public RuleCall getPAPERParserRuleCall_0() { return cPAPERParserRuleCall_0; }
		
		//TURTLE
		public RuleCall getTURTLEParserRuleCall_1() { return cTURTLEParserRuleCall_1; }
		
		//PENSTATE
		public RuleCall getPENSTATEParserRuleCall_2() { return cPENSTATEParserRuleCall_2; }
		
		//PENCOLOUR
		public RuleCall getPENCOLOURParserRuleCall_3() { return cPENCOLOURParserRuleCall_3; }
		
		//MOVE
		public RuleCall getMOVEParserRuleCall_4() { return cMOVEParserRuleCall_4; }
		
		//RIGHT
		public RuleCall getRIGHTParserRuleCall_5() { return cRIGHTParserRuleCall_5; }
		
		//LEFT
		public RuleCall getLEFTParserRuleCall_6() { return cLEFTParserRuleCall_6; }
	}
	public class PAPERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PAPER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPAPERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeXINTTerminalRuleCall_1_0 = (RuleCall)cSizeXAssignment_1.eContents().get(0);
		private final Assignment cSizeYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeYINTTerminalRuleCall_2_0 = (RuleCall)cSizeYAssignment_2.eContents().get(0);
		private final Assignment cPaperColourAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPaperColourSTRINGTerminalRuleCall_3_0 = (RuleCall)cPaperColourAssignment_3.eContents().get(0);
		
		//PAPER:
		//	'PAPER' sizeX=INT sizeY=INT paperColour=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'PAPER' sizeX=INT sizeY=INT paperColour=STRING
		public Group getGroup() { return cGroup; }
		
		//'PAPER'
		public Keyword getPAPERKeyword_0() { return cPAPERKeyword_0; }
		
		//sizeX=INT
		public Assignment getSizeXAssignment_1() { return cSizeXAssignment_1; }
		
		//INT
		public RuleCall getSizeXINTTerminalRuleCall_1_0() { return cSizeXINTTerminalRuleCall_1_0; }
		
		//sizeY=INT
		public Assignment getSizeYAssignment_2() { return cSizeYAssignment_2; }
		
		//INT
		public RuleCall getSizeYINTTerminalRuleCall_2_0() { return cSizeYINTTerminalRuleCall_2_0; }
		
		//paperColour=STRING
		public Assignment getPaperColourAssignment_3() { return cPaperColourAssignment_3; }
		
		//STRING
		public RuleCall getPaperColourSTRINGTerminalRuleCall_3_0() { return cPaperColourSTRINGTerminalRuleCall_3_0; }
	}
	public class TURTLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TURTLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTURTLEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartPosXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartPosXINTTerminalRuleCall_1_0 = (RuleCall)cStartPosXAssignment_1.eContents().get(0);
		private final Assignment cStartPosYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartPosYINTTerminalRuleCall_2_0 = (RuleCall)cStartPosYAssignment_2.eContents().get(0);
		
		//TURTLE:
		//	'TURTLE' startPosX=INT startPosY=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'TURTLE' startPosX=INT startPosY=INT
		public Group getGroup() { return cGroup; }
		
		//'TURTLE'
		public Keyword getTURTLEKeyword_0() { return cTURTLEKeyword_0; }
		
		//startPosX=INT
		public Assignment getStartPosXAssignment_1() { return cStartPosXAssignment_1; }
		
		//INT
		public RuleCall getStartPosXINTTerminalRuleCall_1_0() { return cStartPosXINTTerminalRuleCall_1_0; }
		
		//startPosY=INT
		public Assignment getStartPosYAssignment_2() { return cStartPosYAssignment_2; }
		
		//INT
		public RuleCall getStartPosYINTTerminalRuleCall_2_0() { return cStartPosYINTTerminalRuleCall_2_0; }
	}
	public class PENSTATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PENSTATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPENSTATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPenStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPenStateAlternatives_1_0 = (Alternatives)cPenStateAssignment_1.eContents().get(0);
		private final Keyword cPenStateUPKeyword_1_0_0 = (Keyword)cPenStateAlternatives_1_0.eContents().get(0);
		private final Keyword cPenStateDOWNKeyword_1_0_1 = (Keyword)cPenStateAlternatives_1_0.eContents().get(1);
		
		//PENSTATE:
		//	'PENSTATE' penState=('UP' | 'DOWN');
		@Override public ParserRule getRule() { return rule; }
		
		//'PENSTATE' penState=('UP' | 'DOWN')
		public Group getGroup() { return cGroup; }
		
		//'PENSTATE'
		public Keyword getPENSTATEKeyword_0() { return cPENSTATEKeyword_0; }
		
		//penState=('UP' | 'DOWN')
		public Assignment getPenStateAssignment_1() { return cPenStateAssignment_1; }
		
		//('UP' | 'DOWN')
		public Alternatives getPenStateAlternatives_1_0() { return cPenStateAlternatives_1_0; }
		
		//'UP'
		public Keyword getPenStateUPKeyword_1_0_0() { return cPenStateUPKeyword_1_0_0; }
		
		//'DOWN'
		public Keyword getPenStateDOWNKeyword_1_0_1() { return cPenStateDOWNKeyword_1_0_1; }
	}
	public class PENCOLOURElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PENCOLOUR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPENCOLOURKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColourAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColourSTRINGTerminalRuleCall_1_0 = (RuleCall)cColourAssignment_1.eContents().get(0);
		
		//PENCOLOUR:
		//	'PENCOLOUR' colour=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'PENCOLOUR' colour=STRING
		public Group getGroup() { return cGroup; }
		
		//'PENCOLOUR'
		public Keyword getPENCOLOURKeyword_0() { return cPENCOLOURKeyword_0; }
		
		//colour=STRING
		public Assignment getColourAssignment_1() { return cColourAssignment_1; }
		
		//STRING
		public RuleCall getColourSTRINGTerminalRuleCall_1_0() { return cColourSTRINGTerminalRuleCall_1_0; }
	}
	public class MOVEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MOVE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMOVEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountINTTerminalRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		
		//MOVE:
		//	'MOVE' amount=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'MOVE' amount=INT
		public Group getGroup() { return cGroup; }
		
		//'MOVE'
		public Keyword getMOVEKeyword_0() { return cMOVEKeyword_0; }
		
		//amount=INT
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_1_0() { return cAmountINTTerminalRuleCall_1_0; }
	}
	public class RIGHTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RIGHT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountINTTerminalRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		
		//RIGHT:
		//	'RIGHT' amount=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'RIGHT' amount=INT
		public Group getGroup() { return cGroup; }
		
		//'RIGHT'
		public Keyword getRIGHTKeyword_0() { return cRIGHTKeyword_0; }
		
		//amount=INT
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_1_0() { return cAmountINTTerminalRuleCall_1_0; }
	}
	public class LEFTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LEFT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountINTTerminalRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		
		//LEFT:
		//	'LEFT' amount=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'LEFT' amount=INT
		public Group getGroup() { return cGroup; }
		
		//'LEFT'
		public Keyword getLEFTKeyword_0() { return cLEFTKeyword_0; }
		
		//amount=INT
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_1_0() { return cAmountINTTerminalRuleCall_1_0; }
	}
	
	
	private final PROGRAMElements pPROGRAM;
	private final CMDElements pCMD;
	private final PAPERElements pPAPER;
	private final TURTLEElements pTURTLE;
	private final PENSTATEElements pPENSTATE;
	private final PENCOLOURElements pPENCOLOUR;
	private final MOVEElements pMOVE;
	private final RIGHTElements pRIGHT;
	private final LEFTElements pLEFT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPROGRAM = new PROGRAMElements();
		this.pCMD = new CMDElements();
		this.pPAPER = new PAPERElements();
		this.pTURTLE = new TURTLEElements();
		this.pPENSTATE = new PENSTATEElements();
		this.pPENCOLOUR = new PENCOLOURElements();
		this.pMOVE = new MOVEElements();
		this.pRIGHT = new RIGHTElements();
		this.pLEFT = new LEFTElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PROGRAM:
	//	commands+=CMD*;
	public PROGRAMElements getPROGRAMAccess() {
		return pPROGRAM;
	}
	
	public ParserRule getPROGRAMRule() {
		return getPROGRAMAccess().getRule();
	}
	
	//CMD:
	//	PAPER | TURTLE | PENSTATE | PENCOLOUR | MOVE | RIGHT | LEFT;
	public CMDElements getCMDAccess() {
		return pCMD;
	}
	
	public ParserRule getCMDRule() {
		return getCMDAccess().getRule();
	}
	
	//PAPER:
	//	'PAPER' sizeX=INT sizeY=INT paperColour=STRING;
	public PAPERElements getPAPERAccess() {
		return pPAPER;
	}
	
	public ParserRule getPAPERRule() {
		return getPAPERAccess().getRule();
	}
	
	//TURTLE:
	//	'TURTLE' startPosX=INT startPosY=INT;
	public TURTLEElements getTURTLEAccess() {
		return pTURTLE;
	}
	
	public ParserRule getTURTLERule() {
		return getTURTLEAccess().getRule();
	}
	
	//PENSTATE:
	//	'PENSTATE' penState=('UP' | 'DOWN');
	public PENSTATEElements getPENSTATEAccess() {
		return pPENSTATE;
	}
	
	public ParserRule getPENSTATERule() {
		return getPENSTATEAccess().getRule();
	}
	
	//PENCOLOUR:
	//	'PENCOLOUR' colour=STRING;
	public PENCOLOURElements getPENCOLOURAccess() {
		return pPENCOLOUR;
	}
	
	public ParserRule getPENCOLOURRule() {
		return getPENCOLOURAccess().getRule();
	}
	
	//MOVE:
	//	'MOVE' amount=INT;
	public MOVEElements getMOVEAccess() {
		return pMOVE;
	}
	
	public ParserRule getMOVERule() {
		return getMOVEAccess().getRule();
	}
	
	//RIGHT:
	//	'RIGHT' amount=INT;
	public RIGHTElements getRIGHTAccess() {
		return pRIGHT;
	}
	
	public ParserRule getRIGHTRule() {
		return getRIGHTAccess().getRule();
	}
	
	//LEFT:
	//	'LEFT' amount=INT;
	public LEFTElements getLEFTAccess() {
		return pLEFT;
	}
	
	public ParserRule getLEFTRule() {
		return getLEFTAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
